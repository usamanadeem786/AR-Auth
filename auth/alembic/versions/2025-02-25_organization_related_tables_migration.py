"""organization_related_tables_migration

Revision ID: c3162a996581
Revises: 407008d4e7f5
Create Date: 2025-02-25 21:57:19.494843

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import auth

# revision identifiers, used by Alembic.
revision = "c3162a996581"
down_revision = "407008d4e7f5"
branch_labels = None
depends_on = None


def upgrade():
    table_prefix = op.get_context().opts["table_prefix"]
    connection = op.get_bind()
    dialect = connection.dialect.name

    # Create the enum type based on dialect
    if dialect == "postgresql":
        organization_member_role_enum = postgresql.ENUM(
            "OWNER",
            "ADMIN",
            "MEMBER",
            name=f"{table_prefix}organizationmemberrole",
            create_type=False,
        )
        organization_member_role_enum.create(connection, checkfirst=True)
    else:
        organization_member_role_enum = sa.Enum(
            "OWNER", "ADMIN", "MEMBER", name=f"{table_prefix}organizationmemberrole"
        )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        f"{table_prefix}organization_invitations",
        sa.Column("organization_id", auth.models.generics.GUID(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("token", sa.String(length=255), nullable=False),
        sa.Column("accepted", sa.Boolean(), nullable=False),
        sa.Column("id", auth.models.generics.GUID(), nullable=False),
        sa.Column(
            "created_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "expires_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            [f"{table_prefix}organizations.id"],
            name=op.f(
                f"fk_{table_prefix}organization_invitations_organization_id_{table_prefix}organizations"
            ),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f(f"pk_{table_prefix}organization_invitations")
        ),
        sa.UniqueConstraint(
            "organization_id",
            "email",
            name=op.f(
                f"{table_prefix}organization_invitations_organization_id_email_key"
            ),
        ),
        sa.UniqueConstraint(
            "token", name=op.f(f"{table_prefix}organization_invitations_token_key")
        ),
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_invitations_created_at"),
        f"{table_prefix}organization_invitations",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_invitations_email"),
        f"{table_prefix}organization_invitations",
        ["email"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_invitations_expires_at"),
        f"{table_prefix}organization_invitations",
        ["expires_at"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_invitations_updated_at"),
        f"{table_prefix}organization_invitations",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        f"{table_prefix}organization_members",
        sa.Column("organization_id", auth.models.generics.GUID(), nullable=False),
        sa.Column("user_id", auth.models.generics.GUID(), nullable=False),
        sa.Column(
            "role",
            organization_member_role_enum,
            nullable=False,
            server_default="MEMBER",
        ),
        sa.Column("id", auth.models.generics.GUID(), nullable=False),
        sa.Column(
            "created_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            [f"{table_prefix}organizations.id"],
            name=op.f(
                f"fk_{table_prefix}organization_members_organization_id_{table_prefix}organizations"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            [f"{table_prefix}users.id"],
            name=op.f(
                f"fk_{table_prefix}organization_members_user_id_{table_prefix}users"
            ),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f(f"pk_{table_prefix}organization_members")
        ),
        sa.UniqueConstraint(
            "organization_id",
            "user_id",
            name=op.f(
                f"{table_prefix}organization_members_organization_id_user_id_key"
            ),
        ),
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_members_created_at"),
        f"{table_prefix}organization_members",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_members_role"),
        f"{table_prefix}organization_members",
        ["role"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}organization_members_updated_at"),
        f"{table_prefix}organization_members",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        f"{table_prefix}organization_invitation_permissions",
        sa.Column("invitation_id", auth.models.generics.GUID(), nullable=False),
        sa.Column("permission_id", auth.models.generics.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["invitation_id"],
            [f"{table_prefix}organization_invitations.id"],
            name=op.f(
                f"fk_{table_prefix}organization_invitation_permissions_invitation_id_{table_prefix}organization_invitations"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            [f"{table_prefix}permissions.id"],
            name=op.f(
                f"fk_{table_prefix}organization_invitation_permissions_permission_id_{table_prefix}permissions"
            ),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "invitation_id",
            "permission_id",
            name=op.f(f"pk_{table_prefix}organization_invitation_permissions"),
        ),
    )
    op.create_table(
        f"{table_prefix}organization_member_permissions",
        sa.Column("member_id", auth.models.generics.GUID(), nullable=False),
        sa.Column("permission_id", auth.models.generics.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["member_id"],
            [f"{table_prefix}organization_members.id"],
            name=op.f(
                f"fk_{table_prefix}organization_member_permissions_member_id_{table_prefix}organization_members"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            [f"{table_prefix}permissions.id"],
            name=op.f(
                f"fk_{table_prefix}organization_member_permissions_permission_id_{table_prefix}permissions"
            ),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "member_id",
            "permission_id",
            name=op.f(f"pk_{table_prefix}organization_member_permissions"),
        ),
    )
    op.add_column(
        f"{table_prefix}organizations",
        sa.Column("user_id", auth.models.generics.GUID(), nullable=False),
    )
    op.create_unique_constraint(
        op.f(f"{table_prefix}organizations_user_id_name_key"),
        f"{table_prefix}organizations",
        ["user_id", "name"],
    )
    op.create_foreign_key(
        op.f(f"fk_{table_prefix}organizations_user_id_{table_prefix}users"),
        f"{table_prefix}organizations",
        f"{table_prefix}users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade():
    table_prefix = op.get_context().opts["table_prefix"]
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f(f"fk_{table_prefix}organizations_user_id_{table_prefix}users"),
        f"{table_prefix}organizations",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f(f"{table_prefix}organizations_user_id_name_key"),
        f"{table_prefix}organizations",
        type_="unique",
    )
    op.drop_column(f"{table_prefix}organizations", "user_id")
    op.drop_table(f"{table_prefix}organization_member_permissions")
    op.drop_table(f"{table_prefix}organization_invitation_permissions")
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_members_updated_at"),
        table_name=f"{table_prefix}organization_members",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_members_role"),
        table_name=f"{table_prefix}organization_members",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_members_created_at"),
        table_name=f"{table_prefix}organization_members",
    )
    op.drop_table(f"{table_prefix}organization_members")
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_invitations_updated_at"),
        table_name=f"{table_prefix}organization_invitations",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_invitations_expires_at"),
        table_name=f"{table_prefix}organization_invitations",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_invitations_email"),
        table_name=f"{table_prefix}organization_invitations",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}organization_invitations_created_at"),
        table_name=f"{table_prefix}organization_invitations",
    )
    op.drop_table(f"{table_prefix}organization_invitations")
    # ### end Alembic commands ###
