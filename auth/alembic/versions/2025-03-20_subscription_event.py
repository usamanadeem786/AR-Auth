"""subscription_event

Revision ID: c551bd1dc1aa
Revises: 9b1f92b6b44e
Create Date: 2025-03-20 06:26:01.730352

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import auth

# revision identifiers, used by Alembic.
revision = "c551bd1dc1aa"
down_revision = "9b1f92b6b44e"
branch_labels = None
depends_on = None


def upgrade():
    table_prefix = op.get_context().opts["table_prefix"]
    connection = op.get_bind()
    dialect = connection.dialect.name

    # Create the enum types based on dialect
    if dialect == "postgresql":
        subscriptionevent_status_enum = postgresql.ENUM(
            "NORMAL",
            "CRITICAL",
            name=f"{table_prefix}subscriptionevent_status",
            create_type=False,
        )
        subscriptionevent_status_enum.create(connection, checkfirst=True)
    else:
        subscriptionevent_status_enum = sa.Enum(
            "NORMAL",
            "CRITICAL",
            name=f"{table_prefix}subscriptionevent_status",
        )

    op.create_table(
        f"{table_prefix}subscription_events",
        sa.Column("event_id", sa.String(length=255), nullable=False),
        sa.Column("type", sa.String(length=255), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column(
            "status",
            subscriptionevent_status_enum,
            nullable=False,
            server_default="NORMAL",
        ),
        sa.Column("id", auth.models.generics.GUID(), nullable=False),
        sa.Column(
            "created_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            auth.models.generics.TIMESTAMPAware(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f(f"pk_{table_prefix}subscription_events")),
        sa.UniqueConstraint(
            "event_id", name=op.f(f"{table_prefix}subscription_events_event_id_key")
        ),
    )
    op.create_index(
        op.f(f"ix_{table_prefix}subscription_events_created_at"),
        f"{table_prefix}subscription_events",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f(f"ix_{table_prefix}subscription_events_updated_at"),
        f"{table_prefix}subscription_events",
        ["updated_at"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    table_prefix = op.get_context().opts["table_prefix"]
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f(f"ix_{table_prefix}subscription_events_updated_at"),
        table_name=f"{table_prefix}subscription_events",
    )
    op.drop_index(
        op.f(f"ix_{table_prefix}subscription_events_created_at"),
        table_name=f"{table_prefix}subscription_events",
    )
    op.drop_table(f"{table_prefix}subscription_events")
    # ### end Alembic commands ###
